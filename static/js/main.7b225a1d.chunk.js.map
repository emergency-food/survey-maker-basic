{"version":3,"sources":["i18n/locale.ts","store/settings.ts","_debug/dataGenerator.ts","_debug/generateSurveys.ts","store/surveys.ts","store/root.ts","_debug/DebugView.tsx","base/LabelledWrapper.tsx","base/SettingsView.tsx","base/useSelect.tsx","base/TopBar.tsx","base/useDateRangeInput.tsx","create-survey/useActiveDateRangeInput.ts","create-survey/useTitleInput.ts","base/useTextInput.tsx","create-survey/CreateSurveyView.tsx","base/Loading.tsx","i18n/IntlWrapper.tsx","list-surveys/SurveyActions.tsx","list-surveys/surveyStatus.ts","list-surveys/SurveysTable.tsx","list-surveys/useDisplayableSurveys.ts","list-surveys/ListSurveysView.tsx","base/withSearchParameter.tsx","list-surveys/useStatusFilterConfigurator.tsx","list-surveys/useHideFilteredItemsConfigurator.tsx","serviceWorker.ts","index.tsx"],"names":["LOCALES","en","es","settingsSlice","createSlice","name","initialState","locale","reducers","settingsUpdateLocale","state","action","payload","actions","reducer","dataGenerator","Chance","now","Date","thisYear","getYear","numSurveys","natural","max","console","log","seed","output","i","tsUnlock","date","year","tsExpiry","addDays","tsCreated","subDays","guid","title","company","formatISO","isFuture","generateSurveys","surveysSlice","surveysCreateOne","uuidv4","surveysDeleteOne","updatedListOfSurveys","surveyId","surveysClearAll","rootReducer","combineReducers","settings","settingsReducer","surveys","surveysReducer","store","configureStore","selectAll","selectSettings","selectAllSurveys","DebugView","storeState","useSelector","JSON","stringify","LabelledWrapper","labelText","children","style","display","marginTop","marginBottom","SettingsView","formatMessage","useIntl","history","useHistory","activeLocale","dispatch","useDispatch","labelId","options","initialValue","React","selectedValue","setSelectedValue","selectField","id","onChange","event","currentTarget","value","Object","entries","map","optionKey","optionDescription","key","useSelect","selectedLocale","localeSelect","onClick","push","marginLeft","TopBar","flexGrow","useDateInput","isRequired","isDisabled","inputValue","setInputValue","minDate","setMinDate","maxDate","setMaxDate","inputField","type","required","disabled","min","representation","undefined","parsedDate","parseISO","target","isValid","useActiveDateRangeInput","allowPast","startDate","startDateInput","setMinDateForStart","setMaxDateForStart","endDate","endDateInput","setMinDateForEnd","dateRangeInput","margin","useDateRangeInput","useTitleInput","useTextInput","titleValue","titleInput","CreateSurveyView","showGenericError","setShowGenericError","onSubmit","preventDefault","color","Loading","loadLocaleMessages","IntlWrapper","messages","setMessages","a","loadedMessages","default","defaultLocale","onError","err","code","SurveyActions","survey","status","_id","useSurveyStatusDescriptions","new","completed","TABLE_CELL_STYLES","border","padding","TABLE_HEADER_MSG_IDS","TableRowNoDataWarning","colSpan","length","SurveysTableDataRow","statusDescriptions","emDash","visibility","tsCreatedRelative","setTsCreatedRelative","tsUnlockRelative","setTsUnlockRelative","tsExpiryRelative","setTsExpiryRelative","updateRelativeTimestamps","formatDistanceToNowStrict","addSuffix","interval","setInterval","clearInterval","rowStyles","opacity","backgroundColor","SurveysTable","borderCollapse","index","useDisplayableSurveys","hideFiltered","hiddenStatuses","visibilityForFilteredItems","surveyDetails","tsUnlockDate","tsExpiryDate","surveyStatus","isPast","deriveSurveyStatus","includes","isFilteredOutByStatus","ListSurveysView","Component","parameterKey","defaultValue","defaultValueSerialized","location","useLocation","queryParams","URLSearchParams","search","valueSerialized","get","Error","parameterValue","parse","updateParameterValue","newValue","set","pathname","toString","e","warn","to","withSearchParameter","displayOptions","updateDisplayOptions","displayableSurveys","statusFilterView","updateOptions","surveyStatuses","Set","statusKey","statusDescription","typedStatusKey","has","delete","add","Array","from","checked","useStatusFilterConfigurator","hideFilteredItemsToggle","useHideFilteredItems","Boolean","window","hostname","match","ReactDOM","render","StrictMode","fontFamily","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b225a1d.chunk.js","sourcesContent":["export type LOCALE_KEY = `en` | `es`;\n\nexport const LOCALES: Record<LOCALE_KEY, string> = {\n  en: `English`,\n  es: `Español`,\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LOCALE_KEY } from '../i18n/locale';\n\n// TODO Add toggle for dark-mode.\ninterface Settings {\n  locale: LOCALE_KEY;\n}\n\nconst initialState: Settings = {\n  locale: `en`,\n};\n\nconst settingsSlice = createSlice({\n  name: `settings`,\n  initialState,\n  reducers: {\n    settingsUpdateLocale: (state, action: PayloadAction<LOCALE_KEY>) => {\n      return {\n        ...state,\n        locale: action.payload,\n      };\n    },\n  },\n});\n\nexport const { settingsUpdateLocale } = settingsSlice.actions;\n\nexport const { reducer } = settingsSlice;\n","import { Chance } from 'chance';\n\n// const seed = (() => {\n//   const seedMin = Math.ceil(0);\n//   const seedMax = Math.floor(Math.pow(2, 20));\n//   return Math.floor(Math.random() * (seedMax - seedMin + 1) + seedMin);\n// })();\nconst seed = 350287;\n\nexport const dataGenerator = new Chance(seed);\n","import { addDays, formatISO, getYear, isFuture, subDays } from 'date-fns';\nimport { Surveys } from '../store/surveys';\nimport { dataGenerator } from './dataGenerator';\n\nconst now = new Date();\nconst thisYear = getYear(now);\n\nexport const generateSurveys = (): Surveys => {\n  const numSurveys = dataGenerator.natural({ max: 25 });\n\n  console.log(\n    `Generating ${numSurveys} surveys with the following seed... ${dataGenerator.seed}`\n  );\n\n  const output: Surveys = {};\n  for (let i = 0; i < numSurveys; i++) {\n    const tsUnlock = dataGenerator.date({ year: thisYear }) as Date;\n    const tsExpiry = addDays(tsUnlock, dataGenerator.natural({ max: 100 }));\n    const tsCreated = subDays(tsUnlock, dataGenerator.natural({ max: 25 }));\n\n    output[dataGenerator.guid()] = {\n      title: dataGenerator.company(),\n      tsCreated: formatISO(isFuture(tsCreated) ? now : tsCreated),\n      tsUnlock: formatISO(tsUnlock),\n      tsExpiry: formatISO(tsExpiry),\n    };\n  }\n\n  return output;\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { formatISO } from 'date-fns';\nimport { v4 as uuidv4 } from 'uuid';\nimport { generateSurveys } from '../_debug/generateSurveys';\n\nexport type SurveyId = string;\n\ninterface Survey {\n  title: string;\n  tsCreated: string;\n  tsUnlock: string;\n  tsExpiry: string;\n}\n\nexport type Surveys = Record<SurveyId, Survey>;\n\nconst initialState: Surveys = process.env.REACT_APP_DEMO_MODE\n  ? generateSurveys()\n  : {};\n\nconst surveysSlice = createSlice({\n  name: `surveys`,\n  initialState,\n  reducers: {\n    surveysCreateOne: (\n      state,\n      action: PayloadAction<{\n        title: string;\n        tsUnlock: Date;\n        tsExpiry: Date;\n      }>\n    ) => {\n      const { title, tsUnlock, tsExpiry } = action.payload;\n\n      return {\n        ...state,\n        [uuidv4()]: {\n          title,\n          tsCreated: formatISO(new Date()),\n          tsUnlock: formatISO(tsUnlock),\n          tsExpiry: formatISO(tsExpiry),\n        },\n      };\n    },\n    surveysDeleteOne: (\n      state,\n      action: PayloadAction<{ surveyId: SurveyId }>\n    ) => {\n      const updatedListOfSurveys: Surveys = { ...state };\n      delete updatedListOfSurveys[action.payload.surveyId];\n      return updatedListOfSurveys;\n    },\n    surveysClearAll: () => {\n      return {};\n    },\n  },\n});\n\nexport const {\n  surveysCreateOne,\n  surveysDeleteOne,\n  surveysClearAll,\n} = surveysSlice.actions;\n\nexport const { reducer } = surveysSlice;\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { reducer as settingsReducer } from './settings';\nimport { reducer as surveysReducer } from './surveys';\n\nconst rootReducer = combineReducers({\n  settings: settingsReducer,\n  surveys: surveysReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n\nexport const selectAll = (state: RootState) => state;\n\nexport const selectSettings = (state: RootState) => state.settings;\n\nexport const selectAllSurveys = (state: RootState) => state.surveys;\n","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectAll } from '../store/root';\n\nexport const DebugView: React.FunctionComponent = () => {\n  const storeState = useSelector(selectAll);\n\n  return <pre>{JSON.stringify(storeState, null, 2)}</pre>;\n};\n","import * as React from 'react';\n\nexport const LabelledWrapper: React.FunctionComponent<{\n  labelText: string;\n}> = ({ labelText, children }) => {\n  return (\n    <label style={{ display: `block`, marginTop: 24 }}>\n      <div style={{ marginBottom: 8 }}>{labelText}</div>\n      {children}\n    </label>\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { LOCALES, LOCALE_KEY } from '../i18n/locale';\nimport { selectSettings } from '../store/root';\nimport { settingsUpdateLocale } from '../store/settings';\nimport { surveysClearAll } from '../store/surveys';\nimport { DebugView } from '../_debug/DebugView';\nimport { useSelect } from './useSelect';\n\nexport const SettingsView: React.FunctionComponent = () => {\n  const { formatMessage } = useIntl();\n  const history = useHistory();\n  const { locale: activeLocale } = useSelector(selectSettings);\n  const dispatch = useDispatch();\n  const {\n    selectedValue: selectedLocale,\n    selectField: localeSelect,\n  } = useSelect({\n    labelId: `settings.locale`,\n    options: LOCALES,\n    initialValue: activeLocale,\n  });\n\n  React.useEffect(() => {\n    dispatch(settingsUpdateLocale(selectedLocale as LOCALE_KEY));\n  }, [dispatch, selectedLocale]);\n\n  return (\n    <React.Fragment>\n      <h2 style={{ display: `flex` }}>\n        <button onClick={() => history.push(`/`)}>\n          {formatMessage({ id: `arrow-left` })}\n        </button>\n        <span style={{ marginLeft: 16 }}>\n          {formatMessage({ id: `settings` })}\n        </span>\n      </h2>\n\n      {localeSelect}\n\n      <button\n        onClick={() => dispatch(surveysClearAll())}\n        style={{ marginTop: 16 }}\n      >\n        {formatMessage({ id: `settings.clear-surveys` })}\n      </button>\n\n      <hr />\n      <DebugView />\n    </React.Fragment>\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { LabelledWrapper } from './LabelledWrapper';\n\ninterface SelectConfig<T extends string> {\n  labelId: string;\n  options: Record<T, string>;\n  initialValue: T;\n}\n\nexport function useSelect<T extends string>({\n  labelId,\n  options,\n  initialValue,\n}: SelectConfig<T>) {\n  const { formatMessage } = useIntl();\n  const [selectedValue, setSelectedValue] = React.useState(initialValue);\n\n  const selectField = (\n    <LabelledWrapper labelText={formatMessage({ id: labelId })}>\n      <select\n        onChange={(event) => setSelectedValue(event.currentTarget.value as T)}\n        value={selectedValue}\n      >\n        {Object.entries<string>(options).map(\n          ([optionKey, optionDescription]) => {\n            return (\n              <option key={optionKey} value={optionKey}>\n                {optionDescription}\n              </option>\n            );\n          }\n        )}\n      </select>\n    </LabelledWrapper>\n  );\n\n  return {\n    selectedValue,\n    selectField,\n  };\n}\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\n\nexport const TopBar: React.FunctionComponent = () => {\n  const history = useHistory();\n\n  return (\n    <h1 style={{ display: `flex` }}>\n      <div style={{ flexGrow: 1 }}>\n        <FormattedMessage id={`app-name`} />\n      </div>\n      <button onClick={() => history.push(`/settings`)}>\n        <FormattedMessage id={`settings`} />\n      </button>\n    </h1>\n  );\n};\n","import { formatISO, isValid, parseISO } from 'date-fns';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { LabelledWrapper } from './LabelledWrapper';\n\ninterface DateInputConfig {\n  isRequired: boolean;\n  isDisabled: boolean;\n}\n\nconst useDateInput = ({ isRequired, isDisabled }: DateInputConfig) => {\n  const [inputValue, setInputValue] = React.useState<Date>();\n  const [minDate, setMinDate] = React.useState<Date>();\n  const [maxDate, setMaxDate] = React.useState<Date>();\n\n  const inputField = (\n    <input\n      type={`date`}\n      required={isRequired}\n      disabled={isDisabled}\n      min={minDate ? formatISO(minDate, { representation: `date` }) : undefined}\n      max={maxDate ? formatISO(maxDate, { representation: `date` }) : undefined}\n      value={\n        inputValue === undefined\n          ? ``\n          : formatISO(inputValue, { representation: `date` })\n      }\n      onChange={(event) => {\n        const parsedDate = parseISO(event.target.value);\n        if (isValid(parsedDate)) {\n          setInputValue(parsedDate);\n        }\n      }}\n    />\n  );\n\n  return {\n    inputValue,\n    inputField,\n    setMinDate,\n    setMaxDate,\n  };\n};\n\ninterface DateRangeInputConfig extends DateInputConfig {\n  labelId: string;\n  allowPast: boolean;\n}\n\nexport const useDateRangeInput = ({\n  labelId,\n  isRequired,\n  isDisabled,\n  allowPast,\n}: DateRangeInputConfig) => {\n  const { formatMessage } = useIntl();\n  const {\n    inputValue: startDate,\n    inputField: startDateInput,\n    setMinDate: setMinDateForStart,\n    setMaxDate: setMaxDateForStart,\n  } = useDateInput({\n    isRequired,\n    isDisabled,\n  });\n  const {\n    inputValue: endDate,\n    inputField: endDateInput,\n    setMinDate: setMinDateForEnd,\n  } = useDateInput({\n    isRequired,\n    isDisabled: isDisabled || startDate === undefined,\n  });\n\n  React.useEffect(() => {\n    if (!allowPast) {\n      setMinDateForStart(new Date());\n    }\n  }, [allowPast, setMinDateForStart]);\n\n  React.useEffect(() => {\n    setMaxDateForStart(endDate);\n  }, [endDate, setMaxDateForStart]);\n\n  React.useEffect(() => {\n    setMinDateForEnd(startDate);\n  }, [setMinDateForEnd, startDate]);\n\n  const dateRangeInput = (\n    <LabelledWrapper labelText={formatMessage({ id: labelId })}>\n      {startDateInput}\n      <span style={{ margin: `0 8px` }}>\n        {formatMessage({ id: `arrow-right` })}\n      </span>\n      {endDateInput}\n    </LabelledWrapper>\n  );\n\n  return {\n    startDate,\n    endDate,\n    dateRangeInput,\n  };\n};\n","import { useDateRangeInput } from '../base/useDateRangeInput';\n\nexport const useActiveDateRangeInput = () => {\n  return useDateRangeInput({\n    labelId: `create-survey.date-range-label`,\n    allowPast: false,\n    isRequired: true,\n    isDisabled: false,\n  });\n};\n","import { useTextInput } from '../base/useTextInput';\n\nexport const useTitleInput = () => {\n  const { inputValue: titleValue, inputField: titleInput } = useTextInput({\n    labelId: `create-survey.title-label`,\n    isRequired: true,\n  });\n\n  return {\n    titleValue,\n    titleInput,\n  };\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { LabelledWrapper } from './LabelledWrapper';\n\ninterface TextInputConfig {\n  labelId: string;\n  isRequired: boolean;\n}\n\nexport const useTextInput = ({ labelId, isRequired }: TextInputConfig) => {\n  const { formatMessage } = useIntl();\n  const [inputValue, setInputValue] = React.useState<string>();\n\n  const inputField = (\n    <LabelledWrapper labelText={formatMessage({ id: labelId })}>\n      <input\n        type={`text`}\n        value={inputValue || ``}\n        required={isRequired}\n        onChange={(event) => setInputValue(event.target.value)}\n      />\n    </LabelledWrapper>\n  );\n\n  return {\n    inputValue,\n    inputField,\n  };\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { surveysCreateOne } from '../store/surveys';\nimport { useActiveDateRangeInput } from './useActiveDateRangeInput';\nimport { useTitleInput } from './useTitleInput';\n\nexport const CreateSurveyView: React.FunctionComponent = () => {\n  const { formatMessage } = useIntl();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [showGenericError, setShowGenericError] = React.useState(false);\n  const { titleValue, titleInput } = useTitleInput();\n  const { dateRangeInput, startDate, endDate } = useActiveDateRangeInput();\n\n  React.useEffect(() => {\n    setShowGenericError(false);\n  }, [titleValue, startDate, endDate]);\n\n  const handleSubmit: React.FormEventHandler = (event) => {\n    event.preventDefault();\n\n    if (\n      titleValue === undefined ||\n      startDate === undefined ||\n      endDate === undefined\n    ) {\n      return setShowGenericError(true);\n    }\n\n    dispatch(\n      surveysCreateOne({\n        title: titleValue,\n        tsUnlock: startDate,\n        tsExpiry: endDate,\n      })\n    );\n\n    history.push(`/list-surveys`);\n  };\n\n  return (\n    <React.Fragment>\n      <h2 style={{ display: `flex` }}>\n        <button onClick={() => history.push(`/`)}>\n          {formatMessage({ id: `arrow-left` })}\n        </button>\n        <span style={{ marginLeft: 16 }}>\n          {formatMessage({ id: `create-survey.header` })}\n        </span>\n      </h2>\n\n      <form onSubmit={handleSubmit}>\n        {titleInput}\n        {dateRangeInput}\n\n        <div style={{ marginTop: 32 }}>\n          <button type={`submit`}>\n            {formatMessage({ id: `create-survey.submit` })}\n          </button>\n        </div>\n\n        {showGenericError && (\n          <div style={{ color: `red` }}>\n            {formatMessage({ id: `create-survey.generic-error` })}\n          </div>\n        )}\n      </form>\n    </React.Fragment>\n  );\n};\n","import * as React from 'react';\n\nexport const Loading: React.FunctionComponent = () => {\n  // NOTE We don't want to use internationalized messages here since this component may be rendered before those messages are loaded!\n  return <div>{`Loading...`}</div>;\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Loading } from '../base/Loading';\nimport { selectSettings } from '../store/root';\nimport { LOCALE_KEY } from './locale';\n\nconst loadLocaleMessages = (locale: LOCALE_KEY) => {\n  switch (locale) {\n    case `es`:\n      return import('./es.json');\n    default:\n      return import('./en.json');\n  }\n};\n\nexport const IntlWrapper: React.FunctionComponent = ({ children }) => {\n  const { locale } = useSelector(selectSettings);\n  const [messages, setMessages] = React.useState<Record<string, string>>();\n\n  React.useEffect(() => {\n    (async () => {\n      const loadedMessages = await loadLocaleMessages(locale);\n      setMessages(loadedMessages.default);\n    })();\n  }, [locale]);\n\n  if (messages) {\n    return (\n      <IntlProvider\n        messages={messages}\n        locale={locale}\n        defaultLocale={`en`}\n        onError={(err) => {\n          // TODO Re-enable errors for missing translations.\n          if (err.code === `MISSING_TRANSLATION`) {\n            return;\n          }\n\n          throw err;\n        }}\n      >\n        {children}\n      </IntlProvider>\n    );\n  }\n\n  return <Loading />;\n};\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { surveysDeleteOne } from '../store/surveys';\nimport { DisplayableSurvey } from './useDisplayableSurveys';\n\nexport const SurveyActions: React.FunctionComponent<{\n  survey: DisplayableSurvey;\n}> = ({ survey }) => {\n  const dispatch = useDispatch();\n\n  if (survey.status === `new`) {\n    return (\n      <button\n        onClick={() => {\n          dispatch(surveysDeleteOne({ surveyId: survey._id }));\n        }}\n      >\n        <FormattedMessage id={`list-surveys.action-delete-label`} />\n      </button>\n    );\n  }\n\n  return null;\n};\n","import { isPast } from 'date-fns';\nimport { useIntl } from 'react-intl';\n\nexport type SURVEY_STATUS_KEY = `new` | `in-progress` | `completed`;\n\nexport const useSurveyStatusDescriptions = (): Record<\n  SURVEY_STATUS_KEY,\n  string\n> => {\n  const { formatMessage } = useIntl();\n\n  return {\n    new: formatMessage({ id: `survey-status.new` }),\n    'in-progress': formatMessage({ id: `survey-status.in-progress` }),\n    completed: formatMessage({ id: `survey-status.completed` }),\n  };\n};\n\nexport const deriveSurveyStatus = (\n  tsUnlock: Date,\n  tsExpiry: Date\n): SURVEY_STATUS_KEY => {\n  if (isPast(tsExpiry)) {\n    return `completed`;\n  }\n\n  if (isPast(tsUnlock)) {\n    return `in-progress`;\n  }\n\n  return `new`;\n};\n","import { formatDistanceToNowStrict } from 'date-fns';\nimport * as React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { SurveyActions } from './SurveyActions';\nimport { useSurveyStatusDescriptions } from './surveyStatus';\nimport { DisplayableSurvey } from './useDisplayableSurveys';\n\nconst TABLE_CELL_STYLES = {\n  border: `solid 1px black`,\n  padding: 8,\n};\n\nconst TABLE_HEADER_MSG_IDS = [\n  `list-surveys.title-header`,\n  `list-surveys.status-header`,\n  `list-surveys.actions-header`,\n  `list-surveys.creation-date-header`,\n  `list-surveys.unlock-date-header`,\n  `list-surveys.expiry-date-header`,\n];\n\nconst TableRowNoDataWarning: React.FunctionComponent = () => {\n  return (\n    <tr>\n      <td colSpan={TABLE_HEADER_MSG_IDS.length} style={TABLE_CELL_STYLES}>\n        <FormattedMessage id={`list-surveys.empty-table`} />\n      </td>\n    </tr>\n  );\n};\n\nconst SurveysTableDataRow: React.FunctionComponent<{\n  survey: DisplayableSurvey;\n}> = ({ survey }) => {\n  const { formatMessage } = useIntl();\n  const statusDescriptions = useSurveyStatusDescriptions();\n  const emDash = formatMessage({ id: `em-dash` });\n  const { title, tsCreated, tsUnlock, tsExpiry, status, visibility } = survey;\n  const [tsCreatedRelative, setTsCreatedRelative] = React.useState<string>(\n    emDash\n  );\n  const [tsUnlockRelative, setTsUnlockRelative] = React.useState<string>(\n    emDash\n  );\n  const [tsExpiryRelative, setTsExpiryRelative] = React.useState<string>(\n    emDash\n  );\n\n  const updateRelativeTimestamps = React.useCallback(() => {\n    setTsCreatedRelative(\n      formatDistanceToNowStrict(tsCreated, {\n        addSuffix: true,\n      })\n    );\n    setTsUnlockRelative(\n      formatDistanceToNowStrict(tsUnlock, {\n        addSuffix: true,\n      })\n    );\n    setTsExpiryRelative(\n      formatDistanceToNowStrict(tsExpiry, {\n        addSuffix: true,\n      })\n    );\n  }, [tsCreated, tsExpiry, tsUnlock]);\n\n  React.useEffect(() => {\n    updateRelativeTimestamps();\n\n    // Periodically update the relative timestamps:\n    const interval = setInterval(updateRelativeTimestamps, 1000);\n    return () => clearInterval(interval);\n  }, [tsCreated, updateRelativeTimestamps]);\n\n  const rowStyles: React.CSSProperties = {\n    visibility: visibility === `hide` ? `collapse` : `visible`,\n  };\n  if (visibility === `deemphasize`) {\n    rowStyles.opacity = 0.15;\n    rowStyles.backgroundColor = `lightgrey`;\n  }\n\n  return (\n    <tr style={rowStyles}>\n      <td style={TABLE_CELL_STYLES}>{title}</td>\n      <td style={TABLE_CELL_STYLES}>{statusDescriptions[status]}</td>\n      <td style={TABLE_CELL_STYLES}>\n        <SurveyActions survey={survey} />\n      </td>\n      <td style={TABLE_CELL_STYLES}>{tsCreatedRelative}</td>\n      <td style={TABLE_CELL_STYLES}>{tsUnlockRelative}</td>\n      <td style={TABLE_CELL_STYLES}>{tsExpiryRelative}</td>\n    </tr>\n  );\n};\n\nexport const SurveysTable: React.FunctionComponent<{\n  surveys: Array<DisplayableSurvey>;\n}> = ({ surveys }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <table style={{ border: `solid 1px black`, borderCollapse: `collapse` }}>\n      <thead>\n        <tr>\n          {TABLE_HEADER_MSG_IDS.map((id, index) => (\n            <th key={index} style={TABLE_CELL_STYLES}>\n              {formatMessage({ id })}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {surveys.length > 0 ? (\n          surveys.map((survey) => (\n            <SurveysTableDataRow key={survey._id} survey={survey} />\n          ))\n        ) : (\n          <TableRowNoDataWarning />\n        )}\n      </tbody>\n    </table>\n  );\n};\n","import { parseISO } from 'date-fns';\nimport { useSelector } from 'react-redux';\nimport { selectAllSurveys } from '../store/root';\nimport { SurveyId } from '../store/surveys';\nimport { deriveSurveyStatus, SURVEY_STATUS_KEY } from './surveyStatus';\n\nexport type StatusFilter = Array<SURVEY_STATUS_KEY>;\n\nexport interface DisplayOptions {\n  hideFiltered?: boolean;\n  hiddenStatuses?: StatusFilter;\n}\n\ntype SurveyVisibility = `show` | `hide` | `deemphasize`;\n\nexport interface DisplayableSurvey {\n  _id: SurveyId;\n  title: string;\n  tsCreated: Date;\n  tsUnlock: Date;\n  tsExpiry: Date;\n  status: SURVEY_STATUS_KEY;\n  visibility: SurveyVisibility;\n}\n\nconst isFilteredOutByStatus = (\n  surveyStatus: SURVEY_STATUS_KEY,\n  hiddenStatuses?: StatusFilter\n) => {\n  if (hiddenStatuses) {\n    return hiddenStatuses.includes(surveyStatus);\n  }\n\n  return false;\n};\n\nexport const useDisplayableSurveys = ({\n  hideFiltered,\n  hiddenStatuses,\n}: DisplayOptions): Array<DisplayableSurvey> => {\n  const surveys = useSelector(selectAllSurveys);\n  const visibilityForFilteredItems: SurveyVisibility = hideFiltered\n    ? `hide`\n    : `deemphasize`;\n\n  return Object.entries(surveys).map(([surveyId, surveyDetails]) => {\n    const { title, tsCreated, tsUnlock, tsExpiry } = surveyDetails;\n\n    const tsUnlockDate = parseISO(tsUnlock);\n    const tsExpiryDate = parseISO(tsExpiry);\n\n    const surveyStatus = deriveSurveyStatus(tsUnlockDate, tsExpiryDate);\n    let visibility: SurveyVisibility = `show`;\n    if (hiddenStatuses) {\n      if (isFilteredOutByStatus(surveyStatus, hiddenStatuses)) {\n        visibility = visibilityForFilteredItems;\n      }\n    }\n\n    return {\n      _id: surveyId,\n      title,\n      tsCreated: parseISO(tsCreated),\n      tsUnlock: tsUnlockDate,\n      tsExpiry: tsExpiryDate,\n      status: surveyStatus,\n      visibility,\n    };\n  });\n};\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { withSearchParameter } from '../base/withSearchParameter';\nimport { SurveysTable } from './SurveysTable';\nimport { DisplayOptions, useDisplayableSurveys } from './useDisplayableSurveys';\nimport { useHideFilteredItems } from './useHideFilteredItemsConfigurator';\nimport { useStatusFilterConfigurator } from './useStatusFilterConfigurator';\n\nconst ViewActual: React.FunctionComponent<{\n  parameterValue: DisplayOptions;\n  updateParameterValue: (newValue: DisplayOptions) => void;\n}> = ({\n  parameterValue: displayOptions,\n  updateParameterValue: updateDisplayOptions,\n}) => {\n  const history = useHistory();\n  const displayableSurveys = useDisplayableSurveys(displayOptions);\n  const { statusFilterView } = useStatusFilterConfigurator(\n    displayOptions,\n    updateDisplayOptions\n  );\n  const { hideFilteredItemsToggle } = useHideFilteredItems(\n    displayOptions,\n    updateDisplayOptions\n  );\n\n  return (\n    <React.Fragment>\n      <h2 style={{ display: `flex` }}>\n        <FormattedMessage id={`list-surveys.header`} />\n        <button\n          style={{ marginLeft: 16 }}\n          onClick={() => {\n            history.push(`/create-survey`);\n          }}\n        >\n          <FormattedMessage id={`create-survey.header`} />\n        </button>\n      </h2>\n\n      {statusFilterView}\n      {hideFilteredItemsToggle}\n\n      <SurveysTable surveys={displayableSurveys} />\n    </React.Fragment>\n  );\n};\n\nexport const ListSurveysView = withSearchParameter<DisplayOptions>(\n  ViewActual,\n  `display`,\n  {}\n);\n","import * as React from 'react';\nimport { Redirect, useHistory, useLocation } from 'react-router-dom';\n\nexport function withSearchParameter<T>(\n  Component: React.FunctionComponent<{\n    parameterValue: T;\n    updateParameterValue: (newValue: T) => void;\n  }>,\n  parameterKey: string,\n  defaultValue: T\n): React.FunctionComponent {\n  const defaultValueSerialized = JSON.stringify(defaultValue);\n\n  return () => {\n    const location = useLocation();\n    const history = useHistory();\n    const queryParams = new URLSearchParams(location.search);\n\n    const updateParameterValue = (newValue: T) => {\n      queryParams.set(parameterKey, JSON.stringify(newValue));\n      history.push(`${location.pathname}?${queryParams.toString()}`);\n    };\n\n    try {\n      const valueSerialized = queryParams.get(parameterKey);\n\n      if (valueSerialized === null) {\n        throw new Error(\n          `Cannot find a value for \"${parameterKey}\" in the query-parameters; resetting to the default value (${defaultValueSerialized})!`\n        );\n      }\n\n      const parameterValue = JSON.parse(valueSerialized);\n\n      return (\n        <Component\n          parameterValue={parameterValue}\n          updateParameterValue={updateParameterValue}\n        />\n      );\n    } catch (e) {\n      console.warn(e);\n\n      queryParams.set(parameterKey, defaultValueSerialized);\n      return (\n        <Redirect\n          to={{\n            pathname: location.pathname,\n            search: queryParams.toString(),\n          }}\n        />\n      );\n    }\n  };\n}\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { SURVEY_STATUS_KEY, useSurveyStatusDescriptions } from './surveyStatus';\nimport { DisplayOptions } from './useDisplayableSurveys';\n\nexport const useStatusFilterConfigurator = (\n  options: DisplayOptions,\n  updateOptions: (newValue: DisplayOptions) => void\n) => {\n  const { formatMessage } = useIntl();\n  const surveyStatuses = useSurveyStatusDescriptions();\n  const hiddenStatuses = new Set(options.hiddenStatuses);\n\n  const statusFilterView = (\n    <div>\n      <h5 style={{ marginBottom: 8 }}>\n        {formatMessage({ id: `list-surveys.status-filter-header` })}\n      </h5>\n\n      {Object.entries(surveyStatuses).map(([statusKey, statusDescription]) => {\n        const typedStatusKey = statusKey as SURVEY_STATUS_KEY;\n\n        return (\n          <div key={statusKey}>\n            <label style={{ display: `inline-block` }}>\n              <input\n                type={`checkbox`}\n                onChange={() => {\n                  const currentlyToggledOn = hiddenStatuses.has(typedStatusKey);\n                  if (currentlyToggledOn) {\n                    hiddenStatuses.delete(typedStatusKey);\n                  } else {\n                    hiddenStatuses.add(typedStatusKey);\n                  }\n\n                  updateOptions({\n                    ...options,\n                    hiddenStatuses: Array.from(hiddenStatuses),\n                  });\n                }}\n                checked={hiddenStatuses.has(typedStatusKey)}\n              />\n              <span style={{ marginLeft: 8 }}>{statusDescription}</span>\n            </label>\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  return {\n    statusFilterView,\n  };\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { DisplayOptions } from './useDisplayableSurveys';\n\nexport const useHideFilteredItems = (\n  options: DisplayOptions,\n  updateOptions: (newValue: DisplayOptions) => void\n) => {\n  const { formatMessage } = useIntl();\n\n  const hideFilteredItemsToggle = (\n    <label style={{ display: `inline-block`, margin: `16px 0` }}>\n      <input\n        type={`checkbox`}\n        checked={options.hideFiltered || false}\n        onChange={() => {\n          updateOptions({\n            ...options,\n            hideFiltered: !options.hideFiltered,\n          });\n        }}\n      />\n      <span style={{ marginLeft: 8 }}>\n        {formatMessage({ id: `list-surveys.hide-filtered-items-label` })}\n      </span>\n    </label>\n  );\n\n  return { hideFilteredItemsToggle };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { SettingsView } from './base/SettingsView';\nimport { TopBar } from './base/TopBar';\nimport { CreateSurveyView } from './create-survey/CreateSurveyView';\nimport { IntlWrapper } from './i18n/IntlWrapper';\nimport { ListSurveysView } from './list-surveys/ListSurveysView';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <IntlWrapper>\n        <HashRouter>\n          <div style={{ fontFamily: `sans-serif` }}>\n            <TopBar />\n            <hr />\n\n            <Switch>\n              <Route exact path={`/settings`}>\n                <SettingsView />\n              </Route>\n\n              <Route exact path={`/create-survey`}>\n                <CreateSurveyView />\n              </Route>\n\n              <Route exact path={`/list-surveys`}>\n                <ListSurveysView />\n              </Route>\n\n              <Route path=\"*\">\n                <Redirect to={`/list-surveys`} />\n              </Route>\n            </Switch>\n          </div>\n        </HashRouter>\n      </IntlWrapper>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}