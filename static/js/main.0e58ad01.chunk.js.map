{"version":3,"sources":["store/settings.ts","store/surveys.ts","store/root.ts","base/DebugView.tsx","base/NavBar.tsx","i18n/locale.ts","base/LabelledWrapper.tsx","base/useSelect.tsx","base/SettingsView.tsx","create-survey/useLaunchDateInput.ts","base/useDateInput.tsx","create-survey/useTitleInput.ts","base/useTextInput.tsx","create-survey/CreateSurveyView.tsx","create-survey/useInitialStatusSelect.ts","base/Loading.tsx","i18n/IntlWrapper.tsx","list-surveys/SurveysList.tsx","list-surveys/AllSurveys.tsx","list-surveys/StatusFilteredSurveys.tsx","list-surveys/useFilteredSurveysByStatus.ts","serviceWorker.ts","index.tsx"],"names":["settingsSlice","createSlice","name","initialState","locale","reducers","settingsUpdateLocale","state","action","payload","actions","reducer","surveysSlice","surveysCreateOne","_id","uuidv4","tsCreated","formatISO","Date","useSurveyStatusDescriptions","formatMessage","useIntl","new","id","completed","rootReducer","combineReducers","settings","settingsReducer","surveys","surveysReducer","store","configureStore","selectAll","selectSettings","selectAllSurveys","DebugView","storeState","useSelector","JSON","stringify","NavBar","links","url","description","useLinks","map","index","key","to","style","display","padding","LOCALES","en","es","LabelledWrapper","labelText","children","marginTop","marginBottom","useSelect","labelId","options","initialValue","React","selectedValue","setSelectedValue","selectField","onChange","event","currentTarget","value","Object","entries","optionKey","optionDescription","SettingsView","activeLocale","dispatch","useDispatch","selectedLocale","localeSelect","useLaunchDateInput","isRequired","mode","inputValue","setInputValue","minDateValue","representation","undefined","maxDateValue","inputField","type","min","max","required","parsedDate","parseISO","target","isValid","useDateInput","launchDate","launchDateInput","useTitleInput","useTextInput","titleValue","titleInput","CreateSurveyView","history","useHistory","initialStatus","initialStatusSelect","useInitialStatusSelect","showMissingTitleError","setShowMissingTitleError","onSubmit","preventDefault","title","status","push","color","Loading","loadLocaleMessages","IntlWrapper","messages","setMessages","a","loadedMessages","default","defaultLocale","onError","err","code","TABLE_CELL_STYLES","border","TABLE_HEADER_MSG_IDS","TableHeader","TableBody","surveyStatuses","tsCreatedAsString","formatRFC7231","launchDateAsString","TableBodyForNoData","colSpan","length","SurveysList","borderCollapse","AllSurveys","allSurveys","StatusFilteredSurveys","headerMsgId","filteredSurveys","desiredStatus","useMemo","filter","survey","useFilteredSurveysByStatus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","fontFamily","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e58ad01.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LOCALE_KEY } from '../i18n/locale';\n\ninterface Settings {\n  locale: LOCALE_KEY;\n}\n\nconst initialState: Settings = {\n  locale: `en`,\n};\n\nconst settingsSlice = createSlice({\n  name: `settings`,\n  initialState,\n  reducers: {\n    settingsUpdateLocale: (state, action: PayloadAction<LOCALE_KEY>) => {\n      return {\n        ...state,\n        locale: action.payload,\n      };\n    },\n  },\n});\n\nexport const { settingsUpdateLocale } = settingsSlice.actions;\n\nexport const { reducer } = settingsSlice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { formatISO } from 'date-fns';\nimport { useIntl } from 'react-intl';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport type SURVEY_STATUS_KEY = `new` | `in-progress` | `completed`;\n\ninterface Survey {\n  _id: string;\n  title: string;\n  tsCreated: string;\n  launchDate?: string;\n  status: SURVEY_STATUS_KEY;\n}\n\nexport type Surveys = Array<Survey>;\n\nconst initialState: Surveys = [];\n\nconst surveysSlice = createSlice({\n  name: `surveys`,\n  initialState,\n  reducers: {\n    surveysCreateOne: (\n      state,\n      action: PayloadAction<Omit<Survey, 'tsCreated' | '_id'>>\n    ) => {\n      return [\n        ...state,\n        {\n          ...action.payload,\n          _id: uuidv4(),\n          tsCreated: formatISO(new Date()),\n        },\n      ];\n    },\n  },\n});\n\nexport const { surveysCreateOne } = surveysSlice.actions;\n\nexport const { reducer } = surveysSlice;\n\nexport const useSurveyStatusDescriptions = (): Record<\n  SURVEY_STATUS_KEY,\n  string\n> => {\n  const { formatMessage } = useIntl();\n\n  return {\n    new: formatMessage({ id: `survey-status.new` }),\n    'in-progress': formatMessage({ id: `survey-status.in-progress` }),\n    completed: formatMessage({ id: `survey-status.completed` }),\n  };\n};\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { reducer as settingsReducer } from './settings';\nimport { reducer as surveysReducer } from './surveys';\n\nconst rootReducer = combineReducers({\n  settings: settingsReducer,\n  surveys: surveysReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n\nexport const selectAll = (state: RootState) => state;\n\nexport const selectSettings = (state: RootState) => state.settings;\n\nexport const selectAllSurveys = (state: RootState) => state.surveys;\n","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectAll } from '../store/root';\n\nexport const DebugView: React.FunctionComponent = () => {\n  const storeState = useSelector(selectAll);\n\n  return <pre>{JSON.stringify(storeState, null, 2)}</pre>;\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nconst useLinks = (): Array<{\n  url: string;\n  description: string;\n}> => {\n  const { formatMessage } = useIntl();\n\n  return [\n    {\n      url: `/create-survey`,\n      description: formatMessage({ id: `create-survey.header` }),\n    },\n    {\n      url: `/surveys`,\n      description: formatMessage({ id: `list-surveys.all` }),\n    },\n    {\n      url: `/surveys/new`,\n      description: formatMessage({ id: `list-surveys.new` }),\n    },\n    {\n      url: `/surveys/in-progress`,\n      description: formatMessage({ id: `list-surveys.in-progress` }),\n    },\n    {\n      url: `/surveys/completed`,\n      description: formatMessage({ id: `list-surveys.completed` }),\n    },\n    {\n      url: `/settings`,\n      description: formatMessage({ id: `settings` }),\n    },\n  ];\n};\n\nexport const NavBar: React.FunctionComponent = () => {\n  const links = useLinks();\n\n  return (\n    <nav>\n      <ul>\n        {links.map(({ url, description }, index) => (\n          <li key={index}>\n            <Link to={url} style={{ display: `inline-block`, padding: 8 }}>\n              {description}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n","export type LOCALE_KEY = `en` | `es`;\n\nexport const LOCALES: Record<LOCALE_KEY, string> = {\n  en: `English`,\n  es: `Español`,\n};\n","import * as React from 'react';\n\nexport const LabelledWrapper: React.FunctionComponent<{\n  labelText: string;\n}> = ({ labelText, children }) => {\n  return (\n    <label style={{ display: `block`, marginTop: 24 }}>\n      <div style={{ marginBottom: 8 }}>{labelText}</div>\n      {children}\n    </label>\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { LabelledWrapper } from './LabelledWrapper';\n\ninterface SelectConfig<T extends string> {\n  labelId: string;\n  options: Record<T, string>;\n  initialValue: T;\n}\n\nexport function useSelect<T extends string>({\n  labelId,\n  options,\n  initialValue,\n}: SelectConfig<T>) {\n  const { formatMessage } = useIntl();\n  const [selectedValue, setSelectedValue] = React.useState(initialValue);\n\n  const selectField = (\n    <LabelledWrapper labelText={formatMessage({ id: labelId })}>\n      <select\n        onChange={(event) => setSelectedValue(event.currentTarget.value as T)}\n        value={selectedValue}\n      >\n        {Object.entries<string>(options).map(\n          ([optionKey, optionDescription]) => {\n            return (\n              <option key={optionKey} value={optionKey}>\n                {optionDescription}\n              </option>\n            );\n          }\n        )}\n      </select>\n    </LabelledWrapper>\n  );\n\n  return {\n    selectedValue,\n    selectField,\n  };\n}\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOCALES, LOCALE_KEY } from '../i18n/locale';\nimport { selectSettings } from '../store/root';\nimport { settingsUpdateLocale } from '../store/settings';\nimport { useSelect } from './useSelect';\n\nexport const SettingsView: React.FunctionComponent = () => {\n  const { formatMessage } = useIntl();\n  const { locale: activeLocale } = useSelector(selectSettings);\n  const dispatch = useDispatch();\n  const {\n    selectedValue: selectedLocale,\n    selectField: localeSelect,\n  } = useSelect({\n    labelId: `locale`,\n    options: LOCALES,\n    initialValue: activeLocale,\n  });\n\n  React.useEffect(() => {\n    dispatch(settingsUpdateLocale(selectedLocale as LOCALE_KEY));\n  }, [dispatch, selectedLocale]);\n\n  return (\n    <React.Fragment>\n      <h2>{formatMessage({ id: `settings` })}</h2>\n\n      {localeSelect}\n    </React.Fragment>\n  );\n};\n","import { useDateInput } from '../base/useDateInput';\n\nexport const useLaunchDateInput = () => {\n  const { inputValue: launchDate, inputField: launchDateInput } = useDateInput({\n    labelId: `create-survey.launch-date-label`,\n    isRequired: false,\n    mode: `future-only`,\n  });\n\n  return { launchDate, launchDateInput };\n};\n","import { formatISO, isValid, parseISO } from 'date-fns';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { LabelledWrapper } from './LabelledWrapper';\n\ninterface DateInputConfig {\n  labelId: string;\n  isRequired: boolean;\n  mode: `regular` | `future-only` | `past-only`;\n}\n\nexport const useDateInput = ({\n  labelId,\n  isRequired,\n  mode,\n}: DateInputConfig) => {\n  const { formatMessage } = useIntl();\n  const [inputValue, setInputValue] = React.useState<Date>();\n\n  const minDateValue =\n    mode === `future-only`\n      ? formatISO(new Date(), { representation: `date` })\n      : undefined;\n  const maxDateValue =\n    mode === `past-only`\n      ? formatISO(new Date(), { representation: `date` })\n      : undefined;\n\n  const inputField = (\n    <LabelledWrapper labelText={formatMessage({ id: labelId })}>\n      <input\n        type={`date`}\n        value={\n          inputValue === undefined\n            ? ``\n            : formatISO(inputValue, { representation: `date` })\n        }\n        min={minDateValue}\n        max={maxDateValue}\n        required={isRequired}\n        onChange={(event) => {\n          const parsedDate = parseISO(event.target.value);\n          if (isValid(parsedDate)) {\n            setInputValue(parsedDate);\n          }\n        }}\n      />\n    </LabelledWrapper>\n  );\n\n  return {\n    inputValue,\n    inputField,\n  };\n};\n","import { useTextInput } from '../base/useTextInput';\n\nexport const useTitleInput = () => {\n  const { inputValue: titleValue, inputField: titleInput } = useTextInput({\n    labelId: `create-survey.title-label`,\n    isRequired: true,\n  });\n\n  return {\n    titleValue,\n    titleInput,\n  };\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { LabelledWrapper } from './LabelledWrapper';\n\ninterface TextInputConfig {\n  labelId: string;\n  isRequired: boolean;\n}\n\nexport const useTextInput = ({ labelId, isRequired }: TextInputConfig) => {\n  const { formatMessage } = useIntl();\n  const [inputValue, setInputValue] = React.useState<string>();\n\n  const inputField = (\n    <LabelledWrapper labelText={formatMessage({ id: labelId })}>\n      <input\n        type={`text`}\n        value={inputValue || ``}\n        required={isRequired}\n        onChange={(event) => setInputValue(event.target.value)}\n      />\n    </LabelledWrapper>\n  );\n\n  return {\n    inputValue,\n    inputField,\n  };\n};\n","import { formatISO } from 'date-fns';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { surveysCreateOne } from '../store/surveys';\nimport { useInitialStatusSelect } from './useInitialStatusSelect';\nimport { useLaunchDateInput } from './useLaunchDateInput';\nimport { useTitleInput } from './useTitleInput';\n\nexport const CreateSurveyView: React.FunctionComponent = () => {\n  const { formatMessage } = useIntl();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { titleValue, titleInput } = useTitleInput();\n  const { launchDate, launchDateInput } = useLaunchDateInput();\n  const { initialStatus, initialStatusSelect } = useInitialStatusSelect();\n  const [showMissingTitleError, setShowMissingTitleError] = React.useState(\n    false\n  );\n\n  React.useEffect(() => {\n    setShowMissingTitleError(false);\n  }, [titleValue]);\n\n  const handleSubmit: React.FormEventHandler = (event) => {\n    event.preventDefault();\n\n    if (titleValue === undefined) {\n      return setShowMissingTitleError(true);\n    }\n\n    dispatch(\n      surveysCreateOne({\n        title: titleValue,\n        launchDate:\n          launchDate === undefined ? undefined : formatISO(launchDate),\n        status: initialStatus,\n      })\n    );\n    history.push(`/surveys`);\n  };\n\n  return (\n    <React.Fragment>\n      <h2>{formatMessage({ id: `create-survey.header` })}</h2>\n\n      <form onSubmit={handleSubmit}>\n        {titleInput}\n        {launchDateInput}\n        {initialStatusSelect}\n\n        <div style={{ marginTop: 32 }}>\n          <button type={`submit`}>\n            {formatMessage({ id: `create-survey.submit` })}\n          </button>\n        </div>\n\n        {showMissingTitleError && (\n          <div style={{ color: `red` }}>\n            {formatMessage({ id: `create-survey.missing-title-error` })}\n          </div>\n        )}\n      </form>\n    </React.Fragment>\n  );\n};\n","import { useSelect } from '../base/useSelect';\nimport { useSurveyStatusDescriptions } from '../store/surveys';\n\nexport const useInitialStatusSelect = () => {\n  const surveyStatuses = useSurveyStatusDescriptions();\n\n  const {\n    selectedValue: initialStatus,\n    selectField: initialStatusSelect,\n  } = useSelect({\n    labelId: `create-survey.status-label`,\n    options: surveyStatuses,\n    initialValue: `new`,\n  });\n\n  return {\n    initialStatus,\n    initialStatusSelect,\n  };\n};\n","import * as React from 'react';\n\nexport const Loading: React.FunctionComponent = () => {\n  // NOTE We don't want to use internationalized messages here since this component may be rendered before those messages are loaded!\n  return <div>{`Loading...`}</div>;\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Loading } from '../base/Loading';\nimport { selectSettings } from '../store/root';\nimport { LOCALE_KEY } from './locale';\n\nconst loadLocaleMessages = (locale: LOCALE_KEY) => {\n  switch (locale) {\n    case `es`:\n      return import('./es.json');\n    default:\n      return import('./en.json');\n  }\n};\n\nexport const IntlWrapper: React.FunctionComponent = ({ children }) => {\n  const { locale } = useSelector(selectSettings);\n  const [messages, setMessages] = React.useState<Record<string, string>>();\n\n  React.useEffect(() => {\n    (async () => {\n      const loadedMessages = await loadLocaleMessages(locale);\n      setMessages(loadedMessages.default);\n    })();\n  }, [locale]);\n\n  if (messages) {\n    return (\n      <IntlProvider\n        messages={messages}\n        locale={locale}\n        defaultLocale={`en`}\n        onError={(err) => {\n          // TODO Re-enable errors for missing translations.\n          if (err.code === `MISSING_TRANSLATION`) {\n            return;\n          }\n\n          throw err;\n        }}\n      >\n        {children}\n      </IntlProvider>\n    );\n  }\n\n  return <Loading />;\n};\n","import { formatRFC7231, parseISO } from 'date-fns';\nimport * as React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Surveys, useSurveyStatusDescriptions } from '../store/surveys';\n\nconst TABLE_CELL_STYLES = {\n  border: `solid 1px black`,\n  padding: 8,\n};\n\nconst TABLE_HEADER_MSG_IDS = [\n  `list-surveys.title-header`,\n  `list-surveys.creation-date-header`,\n  `list-surveys.launch-date-header`,\n  `list-surveys.status-header`,\n];\n\nconst TableHeader: React.FunctionComponent = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <thead>\n      <tr>\n        {TABLE_HEADER_MSG_IDS.map((id, index) => (\n          <th key={index} style={TABLE_CELL_STYLES}>\n            {formatMessage({ id })}\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n};\n\nconst TableBody: React.FunctionComponent<{ surveys: Surveys }> = ({\n  surveys,\n}) => {\n  const surveyStatuses = useSurveyStatusDescriptions();\n  const { formatMessage } = useIntl();\n\n  return (\n    <tbody>\n      {surveys.map(({ _id, title, tsCreated, launchDate, status }) => {\n        const tsCreatedAsString = formatRFC7231(parseISO(tsCreated));\n        const launchDateAsString =\n          launchDate === undefined\n            ? formatMessage({ id: `em-dash` })\n            : formatRFC7231(parseISO(launchDate));\n\n        return (\n          <tr key={_id}>\n            <td style={TABLE_CELL_STYLES}>{title}</td>\n            <td style={TABLE_CELL_STYLES}>{tsCreatedAsString}</td>\n            <td style={TABLE_CELL_STYLES}>{launchDateAsString}</td>\n            <td style={TABLE_CELL_STYLES}>{surveyStatuses[status]}</td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n};\n\nconst TableBodyForNoData: React.FunctionComponent = () => {\n  return (\n    <tbody>\n      <tr>\n        <td colSpan={TABLE_HEADER_MSG_IDS.length} style={TABLE_CELL_STYLES}>\n          <FormattedMessage id={`list-surveys.empty-table`} />\n        </td>\n      </tr>\n    </tbody>\n  );\n};\n\nexport const SurveysList: React.FunctionComponent<{\n  surveys: Surveys;\n}> = ({ surveys }) => {\n  return (\n    <table style={{ border: `solid 1px black`, borderCollapse: `collapse` }}>\n      <TableHeader />\n      {surveys.length > 0 ? (\n        <TableBody surveys={surveys} />\n      ) : (\n        <TableBodyForNoData />\n      )}\n    </table>\n  );\n};\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { selectAllSurveys } from '../store/root';\nimport { SurveysList } from './SurveysList';\n\nexport const AllSurveys: React.FunctionComponent = () => {\n  const allSurveys = useSelector(selectAllSurveys);\n\n  return (\n    <React.Fragment>\n      <h2>\n        <FormattedMessage id={`list-surveys.all`} />\n      </h2>\n      <SurveysList surveys={allSurveys} />\n    </React.Fragment>\n  );\n};\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SURVEY_STATUS_KEY } from '../store/surveys';\nimport { SurveysList } from './SurveysList';\nimport { useFilteredSurveysByStatus } from './useFilteredSurveysByStatus';\n\nexport const StatusFilteredSurveys: React.FunctionComponent<{\n  status: SURVEY_STATUS_KEY;\n  headerMsgId: string;\n}> = ({ status, headerMsgId }) => {\n  const filteredSurveys = useFilteredSurveysByStatus(status);\n\n  return (\n    <React.Fragment>\n      <h2>\n        <FormattedMessage id={headerMsgId} />\n      </h2>\n      <SurveysList surveys={filteredSurveys} />\n    </React.Fragment>\n  );\n};\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectAllSurveys } from '../store/root';\nimport { SURVEY_STATUS_KEY } from '../store/surveys';\n\nexport const useFilteredSurveysByStatus = (\n  desiredStatus: SURVEY_STATUS_KEY\n) => {\n  const allSurveys = useSelector(selectAllSurveys);\n\n  return useMemo(() => {\n    return allSurveys.filter((survey) => survey.status === desiredStatus);\n  }, [allSurveys, desiredStatus]);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { DebugView } from './base/DebugView';\nimport { NavBar } from './base/NavBar';\nimport { SettingsView } from './base/SettingsView';\nimport { CreateSurveyView } from './create-survey/CreateSurveyView';\nimport { IntlWrapper } from './i18n/IntlWrapper';\nimport { AllSurveys } from './list-surveys/AllSurveys';\nimport { StatusFilteredSurveys } from './list-surveys/StatusFilteredSurveys';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <IntlWrapper>\n        <HashRouter>\n          <div style={{ fontFamily: `sans-serif` }}>\n            <NavBar />\n            <hr />\n\n            <Switch>\n              <Route exact path={`/settings`}>\n                <SettingsView />\n              </Route>\n\n              <Route exact path={`/create-survey`}>\n                <CreateSurveyView />\n              </Route>\n\n              <Route exact path={`/surveys`}>\n                <AllSurveys />\n              </Route>\n\n              <Route exact path={`/surveys/new`}>\n                <StatusFilteredSurveys\n                  status={`new`}\n                  headerMsgId={`list-surveys.new`}\n                />\n              </Route>\n              <Route exact path={`/surveys/in-progress`}>\n                <StatusFilteredSurveys\n                  status={`in-progress`}\n                  headerMsgId={`list-surveys.in-progress`}\n                />\n              </Route>\n              <Route exact path={`/surveys/completed`}>\n                <StatusFilteredSurveys\n                  status={`completed`}\n                  headerMsgId={`list-surveys.completed`}\n                />\n              </Route>\n\n              <Route path=\"*\">\n                <Redirect to={`/surveys`} />\n              </Route>\n            </Switch>\n\n            <hr />\n            <DebugView />\n          </div>\n        </HashRouter>\n      </IntlWrapper>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}